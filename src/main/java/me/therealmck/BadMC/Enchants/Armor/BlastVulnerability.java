package me.therealmck.BadMC.Enchants.Armor;

import me.therealmck.BadMC.Main;
import me.therealmck.BadMC.Utils.Utils;
import org.bukkit.NamespacedKey;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.enchantments.EnchantmentTarget;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.inventory.ItemStack;
import org.jetbrains.annotations.NotNull;

public class BlastVulnerability extends Enchantment implements Listener {
    public BlastVulnerability() {
        super(new NamespacedKey(Main.instance, "BlastVulnerability"));
    }

    @Override
    public @NotNull String getName() {
        return "Blast Vulnerability";
    }

    @Override
    public int getMaxLevel() {
        return 4;
    }

    @Override
    public int getStartLevel() {
        return 1;
    }

    @Override
    public @NotNull EnchantmentTarget getItemTarget() {
        return EnchantmentTarget.ARMOR;
    }

    @Override
    public boolean isTreasure() {
        return false;
    }

    @Override
    public boolean isCursed() {
        return true;
    }

    @Override
    public boolean conflictsWith(@NotNull Enchantment enchantment) {
        return false;
    }

    @Override
    public boolean canEnchantItem(@NotNull ItemStack itemStack) {
        return true;
    }

    @EventHandler
    public void onDamage(EntityDamageEvent event) {
        if (event.getEntity() instanceof Player && (event.getCause().equals(EntityDamageEvent.DamageCause.BLOCK_EXPLOSION) || event.getCause().equals(EntityDamageEvent.DamageCause.ENTITY_EXPLOSION))) {
            Player p = (Player) event.getEntity();
            int level = Utils.checkArmorEnchant(p, "Blast Vulnerability");

            if (level > 0) {
                double damageIncreasePercent = 8 * level;
                double damage = event.getFinalDamage();
                double multiplier = (damageIncreasePercent/100)+1;

                event.setDamage(damage * multiplier);
            }
        }
    }
}
